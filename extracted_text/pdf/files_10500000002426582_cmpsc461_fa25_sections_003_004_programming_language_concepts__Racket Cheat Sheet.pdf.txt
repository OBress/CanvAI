Racket Cheat Sheet
http://web.mit.edu/racket_v612/amd64_ubuntu1404/racket/doc/racket-cheat/index.html[9/11/22, 10:41:39 PM]Essentials
Sites main  download docs git
Community packages users@ dev@ irc slack twitter
RunningPut #lang racket  "Hello, world!"  in
hello.rkt  and run racket hello.rkt
Primitives
Literalsinteger 1 rational  1/2  complex 1+2i
floating 3.14  double 6.02e+23  hex #x29
octal #o32  binary #b010101
Arithmetic+ - * / quotient  remainder  modulo
add1 sub1 max min round floor
ceiling sqrt expt exp log sin ...
atan
Compare = < <= > >=
Bitwisebitwise-ior  bitwise-and  bitwise-
xor bitwise-not  arithmetic-shift
integer-length
Formatnumber->string  string->number
real->decimal-string
Testnumber? complex?  ... exact-
nonnegative-integer?  ... zero?
positive?  negative?  even? odd?
exact? inexact?
Misc random
Match
Pattern(? number?  n) 42
Literals"Racket"  quoting "a \" approaches!"  unicode "λx:
(μα.α→α).xx"
Createmake-string  string string-append
build-string  string-join
Observestring-length  string-ref  substring
string-split  in-string
Modifystring-downcase  string-upcase
string-trim
Teststring? string=?  string<=?  string-
ci<=?
Regexp#rx"a|b"  #rx"^c(a|d)+r$"  regexp-
quote regexp-match  regexp-split
regexp-replace  regexp-replace*
MatchPattern(? string?  s) "Banana?"
Literals #"rawbytes\0"Syntax (Beginner)
Modules(module+  main  ) 
(module+  test  ) 
(require  ) (provide  )
S-expressions quote '(a b c) quasiquote  unquote
`(1 2 ,(+ 1 2))
Procedure
Applications(  ) 
keyword args (  #:key ) 
(apply   (list ))
Procedures(lambda (x) x) (λ (x) x) 
(λ (x [opt 1]) (+ x opt)) 
(λ (x #:req key) (+ x key)) 
(λ (x #:opt [key 1]) (+ x key))
Binding(let ([x 1] [y 2]) (+ x y)) 
(let* ([x 1] [x (+ x 1)]) x)
Conditionals(if (zero? x) 0 (/ 1 x)) 
(cond [(even? ) 0] [(odd? ) 1] 
      [else "impossible!" ]) 
and or
Definitions(define x 1) 
(define (f y) (+ x y))
Iteration for for/list  for*
Blocks begin when unless
Require
Sub-formsprefix-in  only-in  except-in
rename-in  for-syntax  for-label  ...
Provide
Sub-formsall-defined-out  all-from-out
rename-out  ... contract-out
Definition (struct dillo (weight  color))
Create (define danny (  17.5 'purple))
Observe( ) (  )
(  )
Modify(struct-copy    ([weight
18.0]))
Match
Pattern( w c)
Basics (match  [ ] )
Definitions (match-define   )
Patterns( ) (list  )
(   ) (
 ) (   )
(  ) (  )
(  ) (   )•Racket Cheat Sheet
Racket Cheat Sheet
Essentials
PrimitivesDataSystemsSyntax (Beginner)Syntax (Intermediate)Syntactic Abstractions
Tools  top   ← prev   up  next →  
Numbers
Strings
BytesBasics
body ...
body ...
mod-path id
fnarg1 arg2
fnarg1 arg2
fnarg1 arg2
x x
Structures
dillo
dillo? danny dillo-weight danny
dillo-color danny
dillo danny
dillo
Pattern Matching
value pat body ...
pat value
quote datum lvp ...
list-no-order pat ... vector
lvp ... struct-id pat ...
regexp rx-expr pat orpat ...
and pat ... ?expr pat ...v.6.12

Racket Cheat Sheet
http://web.mit.edu/racket_v612/amd64_ubuntu1404/racket/doc/racket-cheat/index.html[9/11/22, 10:41:39 PM]Create make-bytes  bytes
Numbersinteger->integer-bytes  real-
>floating-point-bytes
Observebytes-length  bytes-ref  subbytes
in-bytes
Modify bytes-set!  bytes-copy!  bytes-fill!
Conversionbytes->string/utf-8  
string->bytes/utf-8
Test bytes? bytes=?
Match
Pattern(? bytes?  b) #"0xDEADBEEF"
Booleans #t #f not equal?
Characters#\a #\tab #\λ char? char->integer
integer->char  char<=?  ... char-
alphabetic?  ...
Symbols'Racket symbol?  eq? string->symbol
gensym
Boxes box? box unbox set-box!  box-cas!
Proceduresprocedure?  apply compose  compose1
keyword-apply  procedure-rename
procedure-arity  curry arity-
includes?
Void void? void
Undefined undefined
Data
Createempty list list* build-list  for/list
Observeempty? list? pair? length list-ref
member count argmin  argmax
Useappend reverse  map andmap  ormap
foldr in-list
Modifyfilter remove ... sort take drop
split-at  partition  remove-duplicates
shuffle
MatchPattern(list   ) (list*   ) (list
  )
Createhash hasheq
Observehash? hash-ref  hash-has-key?  hash-
count in-hash  in-hash-keys  in-hash-
values
Modifyhash-set  hash-update  hash-remove
Createbuild-vector  vector make-vector
list->vectorSyntax (Intermediate)
Mutation set!
Exceptions error with-handlers  raise exit
Promises promise?  delay force
Continuationslet/cc let/ec dynamic-wind  call-
with-continuation-prompt  abort-
current-continuation  call-with-
composable-continuation
Parameters make-parameter  parameterize
External Files
Needed at
Runtimedefine-runtime-path
Continuation
Markscontinuation-marks  with-
continuation-mark  continuation-
mark-set->list
Multiple
Valuesvalues let-values  define-values
call-with-values
Basicsany/c or/c and/c false/c  integer-
in vector/c  listof list/c ...
Functions -> ->* ->i
Applicationcontract-out  recontract-out  with-
contract  define/contract
Sequencesin-range  in-naturals  in-list  in-
vector in-port  in-lines  in-hash
in-hash-keys  in-hash-values  in-
directory  in-cycle  stop-before
stop-after  in-stream
Generators generator  yield in-generator
Sub-structures (struct 2d (x y)) (struct  3d 
(z)) (  ( 1 2 3))
Mutation(struct monster  (type [hp
#:mutable ])) (define healie
(  'slime 10)) (
  0)
Serialization(struct txn (who what where)
#:prefab ) (write (txn "Mustard"
"Spatula"  "Observatory" ))
Definition define-generics
Instantiation(struct even-set  () #:methods
gen:set [(define  (set-member?  st
i) (even? i))])
Definition interface  class*Other
Lists
abc abmore
top more ...
Immutable Hash
VectorBasics
Contracts
Iteration
Structures
2d
2d-x 3d
monster set-
monster-hp! healie
Generics
Classes

Racket Cheat Sheet
http://web.mit.edu/racket_v612/amd64_ubuntu1404/racket/doc/racket-cheat/index.html[9/11/22, 10:41:39 PM]Observevector? vector-length  vector-ref
in-vector
Modifyvector-set!  vector-fill!  vector-
copy! vector-map!
Match
Pattern(vector   ) (vector    
 )
Createstream stream*  empty-stream
Observestream-empty?  stream-first  stream-
rest in-stream
Createmake-hash  make-hasheq
Observehash? hash-ref  hash-has-key?  hash-
count in-hash  in-hash-keys  in-hash-
values
Modifyhash-set!  hash-ref!  hash-update!
hash-remove!
Systems
Formatting ~a ~v ~s ~e ~r pretty-format
Input read read-bytes  peek-byte
Outputwrite write-bytes  display
displayln  pretty-print
Ports andFileswith-input-from-file  with-output-
to-file flush-output  file-position
make-pipe  with-output-to-string
with-input-from-string  port->bytes
port->lines  ...
Pathsbuild-path  bytes->path  path->bytes
path-replace-suffix  ...
Filesfile-exists?  rename-file-or-directory
copy-directory/files  current-directory
make-directory  delete-directory/files
directory-list  filesystem-change-evt
file->bytes  file->lines  make-
temporary-file
Timecurrent-seconds  current-inexact-
milliseconds  date->string  date-
display-format
Command-Line
Parsing command-line
FFI ffi-lib _uint32  ... _fun malloc  free
TCPtcp-listen  tcp-connect  tcp-accept
tcp-closeInstantiation make-object  new instantiate
Methodssend send/apply  send/keyword-
apply send* send+
Fields get-field  set-field!
Mixins mixin
Traitstrait trait-sum  trait-exclude
trait-rename  ...
Contractsclass/c instanceof/c  is-a?/c
implementation?/c  subclass?/c
Syntactic Abstractions
Definitiondefine-syntax  define-simple-
macro begin-for-syntax  for-
syntax
Templates syntax syntax/loc  with-syntax
Parsing ()-
Syntaxsyntax-parse  define-syntax-class
pattern
SyntaxObjectssyntax-source  syntax-line  ...
syntax->datum  datum->syntax
generate-temporaries  format-id
Transformersmake-set!-transformer  make-
rename-transformer  local-expand
syntax-local-value  syntax-local-
name syntax-local-lift-
expression  ...
Syntax
Parametersdefine-syntax-parameter  syntax-
parameterize  syntax-parameter-
value
Parsing RawSyntaxlexer parser  cfg-parser
Tools
Inspection raco pkg show
Finding pkgs.racket-lang.org
Installing raco pkg install
Updating raco pkg update
Removing raco pkg remove
Compiling raco make program.rkt
Testing raco test program.rkt a-directory
BuildingExecutablesraco exe program.rkt
ExtendingDrRacketdrracket:language:simple-module-
based-language->module-based-
language-mixin
Slides slide standard-fish  codexyz xycalabi–
yau ...
Streams
Mutable Hash
Input/Output
Files
Miscellaneous
NetworkingPackages
Miscellaneous

Racket Cheat Sheet
http://web.mit.edu/racket_v612/amd64_ubuntu1404/racket/doc/racket-cheat/index.html[9/11/22, 10:41:39 PM]HTTPhttp-conn  http-conn-open!  http-
conn-send!  http-conn-recv!  http-
conn-sendrecv!  http-sendrecv
URLs string->url  url->string  url-query
Email smtp-send-message  imap-connect  ...
JSON write-json  read-json
XML read-xml  write-xml  write-xexpr
Databasespostgresql-connect  mysql-connect
sqlite3-connect  query-exec  query-
rows prepare  start-transaction  ...
Custodiansmake-custodian  custodian-shutdown-
all current-custodian
Sandboxesmake-evaluator  make-module-
evaluator
Threadsthread kill-thread  thread-wait
make-thread-group
Eventssync choice-evt  wrap-evt  handle-
evt alarm-evt  ...
Channelsmake-channel  channel-get  channel-
put
Semaphoresmake-semaphore  semaphore-post
semaphore-wait
Async
Channelsmake-async-channel  async-channel-
get async-channel-put
Futuresfuture touch processor-count  make-
fsemaphore  ...
Placesdynamic-place  place place-wait
place-wait  place-channel  ...
Processes subprocess  system*Security
Concurrency
Parallelism