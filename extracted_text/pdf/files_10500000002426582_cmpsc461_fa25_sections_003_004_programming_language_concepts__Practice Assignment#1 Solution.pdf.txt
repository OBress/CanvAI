CMPSC 461: Programming Language Concepts, Fall 2025
Assignment 1 Practice Notes Packet
Prof. Suman Saha
August 25, 2025
1/15

Problem 1: Regular Expression I [5 pts]
Given an alphabet {0, 1, 2, ..., 8, 9}construct a regular expression for strings that matches any
four character string that does not end with the digits 4, 6, 1. Come up and write two different
answers (There are more than two correct answers).
Solution
[0−9][0−9][0−9][023578−9] or [0−9][0−9][0−9][ ˆ 461]
1. [0−9]: matches any digit from 0 to 9.
2. [ ˆ 461]: matches any digit except 4,6,1.
2

Problem 2: Regular Expression II [5 pts]
Given an alphabet {a,b,c,d,e}construct a regular expression that matches strings that contain the
sub string ”ace” and ends in the letter ’b’ .
Solution
[abcde ]∗(ace)[abcde ]∗b
1. [abcde ]∗: matches any single character in a,b,c,d,e 0 or more times.
2. (ace): matches ’ace’ .
3

Problem 3: Regular Expression III [5 pts]
Assuming all valid digits and special characters, construct a regular expression that matches integers
from ranges [-461,-311] and [461, 572].
Solution
Break down each range and create patterns that match the numbers within these ranges.
•[−461,−460]:−46(0|1)
•[−459,−400]:−4[0−5][0−9]
•[−399,−320]:−3[2−9][0−9]
•[−319,−311]:−31[1−9]
•[461,469]: 46[1−9]
•[470,499]: 4[7−9][0−9]
•[500,569]: 5[0−6][0−9]
•[570,572]: 57[0−2]
Combining these patterns:
−((46(0|1)|4[0−5][0−9])|3(1[1−9]|[2−9][0−9]))|(4(6[1−9]|[7−9][0−9])|5([0−6][0−9]|7[0−2]))
4

Problem 4: Regular Expression IV [5 pts]
Given the following regular expression a {4}b?[hello](goodluck) give the longest possible string that
is matched by the regular expression. If it is infinite or null, explain why.
Solution
Break down the regex.
1.a{4}: ’a’ must appear exactly 4 times.
2.b?: ’b’ can appear 0 or 1 time.
3. [hello ]: matches any single character from h,e,l,o
4. (goodluck ): matches ”goodluck”
To maximize the length of the matched string, choose ’b’ to appear 1 time.
aaaabhgoodluck
5

Problem 5: Regular Expression V [6 pts]
Write regular expressions for the following languages.
1. The set of strings of 0’s and 1’s whose tenth symbol from the right end is 1.
2. The set of strings of 0’s and 1’s with at most one pair of consecutive 1’s.
Solution
1. The string can have any number of characters before this ’1’ and exactly 9 characters after
this ’1’ .
(0|1)∗1(0|1){9}
2. Before and after the ”11” substring, the string can have any combination of ’0’s and ’1’s, but
no other ”11” substrings. This means zero or more occurrences of either ’0’ or ’1’ before and
after ”11” while the substring before ”11” dose not end with ’1’ and the substring after ”11”
does not start with ’1’ . Also note that string ”11” can be optional.
(0|10)∗(11|ϵ)(0|01)∗
6

Problem 6: Regular Expression VI [5 pts]
Give English descriptions of the languages of the following regular expressions.
1. ((10)∗000(01)∗
2. (0|10)∗1∗
Solution
1. This is a language of binary strings with at least three consecutive 0s in the middle with
possibility of at most 5 consecutive 0s when both left and right parts are non-empty.
2. This is the language of binary strings in which there are no two consecutive 1’s, except for
possibly a string of 1’s at the end.
7

Problem 7: Regular Expression VII [5 pts]
Write down the set of strings recognized by the following regular expressions. If the set is
infinite, write down the first 4 shortest elements.
1.abc|(ed|f)|a
2.a∗(ab|b)∗
Solution
1.{“a”, ”f”, ”ed”, “abc” }
2.{“”, “a”, “b”, “ab” }
8

Problem 8: Finite Automata I [8 pts]
Give NFAs with the specified number of states recognizing each of the following languages. In
all cases, the alphabet is/summationtext={0,1}.
1. The language {w∈/summationtext∗|w contains the substring 0101, i.e., w = x0101y for x, y ∈/summationtext∗}
with five states.
2. The language{w∈/summationtext∗|w contains at least two 0s, or exactly two 1s }with six states.
Solution
1. Regular expression: (0 |1)∗(0101)(0|1)∗As the substring ’0101’ needs to be present,
we are ensuring this in the regex, allowing it to be preceded and followed by either ’0’
or ’1’ .
2. Regular expression: ((0 |1)∗0(1)∗0(0|1)∗)|(0∗10∗10∗) As there need to be atleast two
0s, or exactly two 1s
9

Problem 9: Finite Automata II [7 pts]
1. What is a Finite Automata? Explain how it is related to regular languages. [2 pts]
2. For the given alphabet {a,b}, design a NFA which contains abas substring ( e.g., ab, aab,
bab, abab, aaba etc. ). Neatly describe the initial state ,accepting state , and transitions ,
if any. [5 pts]
Solution
1. Finite Automata is the simplest machine to recognize patterns. Regular languages are a class
of languages that are recognized by a Finite Automata.
2. Regular expression: ( a|b)∗(ab)(a|b)∗.
NFA -
10

Problem 10: Finite Automata III [10 pts]
1. For the NFA given below, construct a DFA using subset construction method. Neatly describe
the transition tables associated with it. [7.5 pts]
2. Is the language described by the above NFA regular? Explain your reasoning. [2.5 pts]
Solution
1.NFA table
state 0 1
q0q0,q1q0
q1q2 q1
q2 q3 q3
q3 - q2
Since there’s no ϵtransitions, the start state of our DFA would be q0.
Initialize the table:
state 0 1
q0q0q1q0
Find destination states for q0q1. On input ’0’, q0goes toq0andq1; andq1goes toq2, soq0q1
goes toq0q1q2on ’1’ . On input ’1’, q0goes toq0andq1goesq1, soq0q1goes toq0q1.
state 0 1
q0q0q1q0
q0q1q0q1q2q0q1
We got a new state q0q1q2. Find destination states for it. On input ’0’, q2goes toq3andq0q1
goes toq0q1q2, soq0q1q2goes toq0q1q2q3. On input ’1’, q2goes toq3andq0q1goes toq0q1,
soq0q1q2goes toq0q1q3.
state 0 1
q0q0q1q0
q0q1q0q1q2q0q1
q0q1q2q0q1q2q3q0q1q3
Repeat this process for new states q0q1q2q3again. On input ’0’, q0q1q2goes toq0q1q2q3so
q0q1q2q3. On input ’1’, q0q1q2goes toq0q1q3andq3goes toq2, soq0q1q2q3goes toq0q1q2q3.
11

state 0 1
q0q0q1q0
q0q1q0q1q2q0q1
q0q1q2q0q1q2q3q0q1q3
q0q1q2q3q0q1q2q3q0q1q2q3
Don’t forget q0q1q3we got before. On input ’0’, q0q1goes toq0q1q2soq0q1q3goes toq0q1q2.
On input ’1’, q0q1goes toq0q1andq3goes toq2, soq0q1q2goes toq0q1q2.
DFA table
state 0 1
q0 q0,q1 q0
q0,q1 q0,q1,q2 q0,q1
q0,q1,q2 q0,q1,q2,q3 q0,q1,q3
q0,q1,q2,q3q0,q1,q2,q3q0,q1,q2,q3
q0,q1,q3 q0,q1,q2 q0,q1,q2
Any state that contains q3would be an accepting state.
q0
q0q1
q0q1q2q0q1q3
q0q1q2q301
1
0
10,1
0
0,1
2. The language described by the NFA is regular because there exists a DFA that recognizes the
same language.
12

Problem 11: Finite Automata IV [10 pts]
1. For the NFA given below, construct a DFA using subset construction method. Neatly describe
the transition tables associated with it. [7.5 pts]
2. Is the language described by the above NFA regular? Explain your reasoning. [2.5 pts]
Solution
1.NFA table
state a b
q0q1,q2-
q1 - -
q2 q1,q2q2
q0 on input ’a’ goes to q1,q2.
q1 on input ’a’ goes to ϕ. q2 on input ’a’ goes to q1,q2 hence q1,q2 on input ’a’ goes to q1,q2.
q1 on input ’b’ goes to ϕ. q2 on input ’b’ goes to q2 hence q1,q2 on ’b’ goes to q2.
q2 on input ’a’ goes to q1,q2 and on input ’b’ goes to q2.
DFA table
state a b
q0 q1,q2-
q1,q2q1,q2q2
q2 q1,q2q2
13

2. The language described by the NFA is regular because there exists a DFA that recognizes the
same language.
14

Problem 12: Finite Automata V [8 pts]
Draw a deterministic finite automata which accepts a string containing “ing” at the end of a
string in a string of a-z, e.g., “anything” but not “anywhere” .
Solution Let’s consider q0 as the start state. Since the string must end with ’ing’, q0 transitions
to q1 on input ’i’ . For any other input (i.e., any letter from a-z except ’i’), we loop in q0 and wait
until we get an ’i’ . q1 transitions to q2 on input ’n’ . q1 on input ’i’ loops back to itself and waits for
an ’n’ . q1 transitions back to q0 on input of any letter besides ’i’ or ’n’ . On input ’g’, q2 transitions
to q3, the accepting state. If q2 receives an ’i’, it transitions back to q1 and waits for an ’n’ . If
any other letter is input (i.e., any letter from a-z except ’i’ and ’g’), q2 transitions back to q0 and
starts searching for the pattern again.
15